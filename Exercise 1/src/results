#!/bin/bash
##################################################################################################
#   results script
#
#   Author : Spyridakis Christos
#   Created Date : 7/10/2019
#   Last Updated : 8/10/2019
#   Email : spyridakischristos@gmail.com
#
#   Description : 
#
#
#
#
##################################################################################################

#
TRUE=0
FALSE=1

# INPUT Parameters
INPUT_FILE=""
OUTPUT_FILE=""
ERRORS_FILE=""
CHECK_FILE=""
DEBUG=${FALSE}
QUIET=${FALSE}


#
#   brief: Print in terminal and/or external file the error messages based on user input flags
#
error(){
    # Print error messages in terminal if quiet mode is not enabled
    if [ -f ${QUIET} ] ; then echo -n $@ ; fi ;
    # Print error messages in file if it is given
    if [ "${ERRORS_FILE}" != "" ] ; then echo -n $@ >> ${ERRORS_FILE} ; fi ;
}



#
#   brief: Check if input file exists and if it is valid
#          (has correct syntax)
#
#   param: $1 -> The name of the file (actually its path)
# 
#   return: The content of the file and status code:
#           0 if it is OK,
#           10 if file is empty,
#           11 if something is wrong with the format of the file at any point,
#           12 if file is too big,
#           13 if there is not read permission,
#           14 if file does not exist
#
check(){
    if [ ${DEBUG} ] ; then echo -n "\tFunction: check(), --START--" ; fi ;

    local result=""
    local inputFile=$1

    #File exists, is readable and is not empty
    if [ -f ${inputFile} ] && [ -r ${inputFile}] && [ -s ${inputFile}]; then
        echo "File OK" #TODO format check

    elif [ !-f ${inputFile} ] ; then
        echo "Function: check(), "
    fi

    echo ${result}
    return 0
}

#
#   brief: Help menu
#
usage() {
    echo "Usage: `basename ${0}` [OPTION]... [FILE]..."
    echo "#TODO Description:"
    echo 
    echo "Options:"
    echo "  -c, --check               check input file and exit"
    echo "  -d, --debug               debug mode on"
    echo "  -e, --error               display errors in given file"
    echo "  -h, --help                print this help menu"   
    echo "  -i, --input               give input file name"
    echo "  -o, --ouput               give output file name"
    echo "  -q, --quiet               disable errors reporting"
    echo 
    echo
    echo "Exit status:"
    echo "   0 if OK,"
    echo "   1 if error with given argument at any point,"
    echo 
    echo "Examples:"
    echo #TODO
    echo 
    echo "Implementation:"
    echo "   version         `basename ${0}` 0.0.1"
    echo "   author          Spyridakis Christos"
    echo "   copyright       Copyright (c) 2019 https://www.github.com/CSpyridakis/SDTSP"
    echo "   license         MIT License"
}

#MAIN
while getopts "c:de:hi:o:q-:" opt ; do
    case $opt in
        #GNU-style long options support
        -)
            case "${OPTARG}" in 
                # check)      CHECK_FILE= ; exit $(check ${CHECK_FILE})               ;;  #Check input file
                debug)      DEBUG=${TRUE}               ;;  #Debug mode on
                error)      ERRORS_FILE=${OPTARG#*=}    ;;  #File for error messages
                help)       usage ; exit 0              ;;  #Help menu
                input)      INPUT_FILE=${OPTARG#*=}     ;;  #Input file
                ouput)      OUTPUT_FILE=${OPTARG#*=}    ;;  #Output file
                quiet)      QUIET=${TRUE}               ;;  #Quiet mode
                \?)         echo "ddddddddd" ; exit 0              ;;  #Unknown
                *)          echo "wwwwwwww" ; exit 0              ;;  #Unknown
            esac
        ;;
        
        c)      CHECK_FILE=${OPTARG} ; echo ${CHECK_FILE}            ;;  #Check input file
        d)      DEBUG=${TRUE}           ;;  #Debug mode on
        e)      ERRORS_FILE=${OPTARG}   ;;  #File for error messages
        h)      usage ; exit 0          ;;  #Help menu
        i)      INPUT_FILE=${OPTARG}    ;;  #Input file
        o)      OUTPUT_FILE=${OPTARG}   ;;  #Output file
        q)      QUIET=${TRUE}           ;;  #Quiet mode
        \?)     echo "Execute: \$ ${0} -h, in order to see properly usage" ; exit 0 ;; #Unknown option
        *) echo "qqqqqqqqqq" ; exit 0   ;; #TODO : arguments needed
    esac
done

shilf $((OPTIND-1))

echo "INPUT_FILE = ${INPUT_FILE}"
echo "OUTPUT_FILE = ${OUTPUT_FILE}"
echo "ERRORS_FILE = ${ERRORS_FILE}"
echo "DEBUG = ${DEBUG}"
echo "QUIET = ${QUIET}"
echo "CHECK = ${CHECK}"