#!/bin/bash
##################################################################################################
#   results bash script
#
#   Author : Spyridakis Christos
#   Created Date : 7/10/2019
#   Last Updated : 9/10/2019
#   Email : spyridakischristos@gmail.com
#
#   Description : 
#       Calculate football team ranking, based on each game result.
#       The input file's format is a collection of game outcomes. Each row looks like this: 
#       TeamA-TeamB:ScoreA-ScoreB
#
#
##################################################################################################

#
TRUE="0"
FALSE="1"

# INPUT Parameters
INPUT_FILES=""
OUTPUT_FILE=""
ERRORS_FILE=""
CHECK_FILE=""
DEBUG="${FALSE}"
QUIET="${FALSE}"


#
#   brief: Print in stderr and/or in external file the error messages based on user input flags
#
error(){
    # Print error messages in stderr if quiet mode is not enabled
    if [ "${QUIET}" == "${FALSE}" ] ; then echo -e "$@" >&2 ; fi ;
    # Print error messages in file if it is given
    if [ "${ERRORS_FILE}" != "" ] ; then echo -n "$@" >> ${ERRORS_FILE} ; fi ;
}


#
#   brief: Check if input file exists and if it is valid
#          (has correct syntax)
#
#   param: $1 -> The name of the file (actually its path)
# 
#   return: The content of the file and status code:
#           0 if it is OK,
#           10 if file is empty,
#           11 if something is wrong with the format of the file at any point,
#           12 if file is too big,
#           13 if there is not read permission,
#           14 if file does not exist
#
check(){
    if [ ${DEBUG} = "${TRUE}" ] ; then echo -e "Function: check(). Check file: ${CHECK_FILE}\t\t---Start" ; fi ;

    local result=0
    local inputFile=$1

    #File exists, is readable and is not empty
    if [ -f ${inputFile} ] && [ -r ${inputFile} ] && [ -s ${inputFile} ]; then
        if [ ${DEBUG} = "${TRUE}" ] ; then echo -e "\t${CHECK_FILE} | File is ok!" ; fi ;

    elif [ ! -f ${inputFile} ] ; then
         error "\t ${CHECK_FILE} | File does not exist"
         result=14
    elif [ ! -r ${inputFile} ] ; then
         error "\t ${CHECK_FILE} | File is not readable"
         result=13
    elif [ ! -s ${inputFile} ] ; then
         error "\t ${CHECK_FILE} | File is empty"  
         result=10 
    fi

    return ${result}
}

#
#   brief: Help menu
#
usage() {
    echo "Usage: `basename ${0}` [-h] | [-t] | [-c filetocheck] | [-dq] [-e errorfile] [-o outputfile] <inputfiles>..."
    echo 
    echo "Calculate football team ranking, based on each game result."
    echo "The input file's format is a collection of game outcomes. Each row looks like this: "
    echo "TeamA-TeamB:ScoreA-ScoreB"
    echo 
    echo "Options:"
    echo "  -c                check input file and exit"
    echo "  -d                debug mode on"
    echo "  -e                write stderrors in given file"
    echo "  -h                print this help menu and exit"   
    echo "  -o                write output in given file"
    echo "  -q                disable errors reporting"
    echo "  -t                run unit tests"
    echo 
    echo
    echo "Exit status:"
    echo "   0 if OK,"
    echo 
    echo "- Input options:"
    echo "   1 if error with given argument at any point,"
    echo "   2 if unknown option,"
    echo "   3 if unexpected error,"
    echo 
    echo "Examples:"
    echo "   `basename ${0}` -e errorfile.txt inputfile.txt"
    echo "   `basename ${0}` -c inputfile.txt      # Check input's files format"
    echo "   `basename ${0}` -d -e errorsfile.txt -o results.txt june_2019.txt july_2019.txt august_2019.txt"
    echo 
    echo "Implementation:"
    echo "   version         `basename ${0}` 0.0.1"
    echo "   author          Spyridakis Christos"
    echo "   copyright       Copyright (c) 2019 https://www.github.com/CSpyridakis/SDTSP"
    echo "   license         MIT License"
}

#MAIN
#---------------------------------------------------------------------------------------------
while getopts ":c:de:ho:q" opt ; do
    case $opt in
        c)      CHECK_FILE="${OPTARG}" ; DEBUG=${TRUE} ; check ${CHECK_FILE}  ; exit $? ;;  
        d)      DEBUG=${TRUE}                                                           ;;  
        e)      ERRORS_FILE="${OPTARG}"                                                 ;;  
        h)      usage ; exit 0                                                          ;;  
        o)      OUTPUT_FILE="${OPTARG}"                                                 ;;  
        q)      QUIET=${TRUE}                                                           ;;  
        t)      tests                                          ;    exit $?             ;;  
        :)      error "Missing argument for -$OPTARG option!\nExecute: \$ ${0} -h, in order to see properly usage" ; exit 1  ;;
        \?)     error "Invalid option: -$OPTARG\nExecute: \$ ${0} -h, in order to see properly usage"              ; exit 2  ;; 
    esac
done

shift $(( OPTIND - 1 ))

if [ ${DEBUG} ] ; then
    echo "-INPUT_FILES = ${INPUT_FILES}"
    echo "-OUTPUT_FILE = ${OUTPUT_FILE}"
    echo "-ERRORS_FILE = ${ERRORS_FILE}"
    echo "-QUIET = ${QUIET}"
fi