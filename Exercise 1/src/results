#!/bin/bash
##################################################################################################
#
#   results bash script
#
#   Author : Spyridakis Christos
#   Created Date : 7/10/2019
#   Last Updated : 23/10/2019
#   Email : spyridakischristos@gmail.com
#
#   Description : 
#       Calculate football team ranking, based on each game result.
#       The input files' format is a collection of game outcomes. Each row looks like this: 
#       TeamA-TeamB:ScoreA-ScoreB
#
##################################################################################################


# Use regular expression to validate input files
LINEREGEX="^([^- :]|[^- :][^-:]*[^- :])-([^- :]|[^- :][^-:]*[^- :]):[0-9]+-[0-9]+$"

#For input testing: ^([^- :]|[^- :][^-:]{0,10}[^- :])-([^- :]|[^- :][^-:]{0,10}[^- :]):[0-9]{1,10}-[0-9]{1,10}$

# Auxiliary variables 
FALSE=0
TRUE=1
TMP_FILE="tmpfile.txt"

# Based on user input
INPUT_FILES="" # TODO 
OUTPUT_FILE=
ERRORS_FILE=
CHECK_FILE=
DEBUG=${FALSE}
QUIET=${TRUE}
CHECK=${FALSE}

VERSION="1.0.0"


# ---------------------------------------------------------------------------------------------
#   brief: Print in stderr and/or in external file the error messages based on user input options
#
error(){
    # Print error messages in stderr if quiet mode is not enabled
    if [ ${CHECK} -eq ${TRUE} ] || [ ${QUIET} -eq ${FALSE} ] || [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "$@" >&2 ; fi ;
    # Print error messages in file if it is given
    if [ ! -z ${ERRORS_FILE} ] ; then echo -e "$@" >> ${ERRORS_FILE} ; fi ;
}


# ---------------------------------------------------------------------------------------------
#   brief: Check if input file exists and if it is valid
#          (has correct syntax)
#
#   param: $1 -> The name of the file (actually its path)
# 
#   return: Exit with status code:
#           0 if it is OK,
#           10 if file is empty,
#           11 if something is wrong with the format of the file at any point,
#           12 if file is too big,
#           13 if there is not read permission,
#           14 if file does not exist,
#           15 if is not a regular file,
#           3 for unexpected error
#
check(){
    # In case that user wants to display error messages to a file, create it or empty its previous content
    if [ ${CHECK} -eq ${TRUE} ] && [ ! -z ${ERRORS_FILE} ] ; then echo -n "" > "${ERRORS_FILE}" ; fi ;

    local result=3
    local inputFile=$1

    # File exists, is regular file, is readable and is not empty BUT i don't know yet if it is acceptable
    if [ -e ${inputFile} ] && [ -f ${inputFile} ] && [ -r ${inputFile} ] && [ -s ${inputFile} ]; then
        
        # Check if all lines of the file are in the needed format.
        # local originalLines=$(cat ${inputFile})
        local originalLines=$(grep . ${inputFile})
        local goodLines=$(grep -E "${LINEREGEX}" ${inputFile})

        # if [ ${DEBUG} = "${TRUE}" ] ; then 
        #     echo -e "+++++++++++++++++++++++"
        #     echo -e "{ORIGINAL FILE} | Lines # : `echo -e "${originalLines}" | wc -l`"
        #     echo -e "${originalLines}\n{END}\n"
        #     echo -e "{ACCEPTABLE PART} | Lines # : `echo -e "${goodLines}" | wc -l` "
        #     echo -e "${goodLines}\n{END}}"
        #     echo -e "+++++++++++++++++++++++\n"
        # fi 
        
        # Check if all lines of the file are valid
        if [ "${originalLines}" == "${goodLines}" ] ; then
            if [ ${CHECK} -eq ${TRUE} ] || [ ${DEBUG} -eq ${TRUE} ]; then echo -e "{DEBUG} - Function: check(). Check file: ${inputFile} --> File is valid!\n" ; fi ; 
            result=0
        else
            error "{DEBUG} - Function: check(). Check file: ${inputFile} --> File does not have the needed format!"
            result=11
        fi 
    elif [ ! -e ${inputFile} ] ; then
        error "{DEBUG} - Function: check(). Check file: ${inputFile} --> File does not exist"
        result=14
    elif [ ! -f ${inputFile} ] ; then
        error "{DEBUG} - Function: check(). Check file: ${inputFile} --> This is not a regular file"
        result=15
    elif [ ! -r ${inputFile} ] ; then
        error "{DEBUG} - Function: check(). Check file: ${inputFile} --> File is not readable"
        result=13
    elif [ ! -s ${inputFile} ] ; then
        error "{DEBUG} - Function: check(). Check file: ${inputFile} --> File is empty"  
        result=10 
    else
        error "{DEBUG} - Function: check(). Check file: ${inputFile} --> Unexpected error"  
        result=3
    fi

    return ${result}
}


# -----------------------------------------------------------------------------------------------------------------------------------------------------
#   brief:  Find out if element exist in array 
#
#   param: $1, $2 ... -> Each element of the array and the last element is the element you want to find out if exist there
#
exists(){
    local arrayN=$#
    local value=${!arrayN}                   #Use Variable indirect expansion to extract which value to check
    for ((i=1;i < $#;i++)) ; do
        if [ "${!i}" == "${value}" ]; then
            return 0
        fi
    done
    return 1
}


# -----------------------------------------------------------------------------------------------------------------------------------------------------
#   brief:  Take all of the input files football team ranking 
#
#   param: $1, $2 ... -> The name of each file (actually its path).
#
#   return: Exit with status code:
#           0 if it is OK,
#           1 if divided by zero,
#           3 for unexpected error,
#           K if something is wrong with the file
#
#   see:    Inline documentation of check() function for K values 
#
results(){
    local ERROR=3

    # Check each file
    for inFile in $@ ; do
        if [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "________________________________________________________________________________________________\n" ; fi;
        check ${inFile}
        ERROR=$?

        # Exit function if there is something wrong one of the given files
        if [ ${ERROR} -ne 0 ] ; then return ${ERROR}; fi
    done

    # Concate input files
    inptText=$(for i in $@ ; do cat $i ; echo "" ;  done | grep .) 

    unset teamsNames ; unset rankScore ; unset scoredGoals ; unset concededGoals ;  # Delete arrays, if already exist

    declare -a teamsNames           # Numeric indexed array contains team names
    declare -A rankScore            # Use associative array to store team rank score
    declare -A scoredGoals          # Use associative array to store each team scored goals
    declare -A concededGoals        # Use associative array to store each team conceded goals

    # Read each line, find out team names/scores and calculate scored/conceded goals for each team and each team rank score
    OLD_IFS=${IFS}
    IFS=$'\n'
    if [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "{TEAMS}" ; fi ;
    for line in ${inptText} ; do

        # Replace spaces with dash on team names (use spaces as field separator for sort, etc...)
        teamA=$(echo ${line} | cut -d"-" -f1 | tr " " "-" | tr "*" ":")                                  
        teamB=$(echo ${line} | cut -d"-" -f2 | rev | cut -d":" -f2- | rev | tr " " "-" | tr "*" ":")     
        scoreA=$(echo ${line} | rev | cut -d":" -f1 | cut -d"-" -f2 | rev)                  
        scoreB=$(echo ${line} | rev | cut -d"-" -f1 | rev)                                  
        
        if [ ${DEBUG} -eq ${TRUE} ] ; then echo "TeamA: '${teamA}' - TeamB: '${teamB}' | ScoreA: ${scoreA} - ScoreB: ${scoreB}" ; fi ;

        # Check if each team already exists or add it  
        exists "${teamsNames[@]}" "${teamA}"
        if [ $? -eq 1 ] ; then teamsNames+=("${teamA}") ; rankScore+=(["${teamA}"]=0) ; scoredGoals+=(["${teamA}"]=0) ; concededGoals+=(["${teamA}"]=0) ; fi
        exists "${teamsNames[@]}" "${teamB}"
        if [ $? -eq 1 ] ; then teamsNames+=("${teamB}") ; rankScore+=(["${teamB}"]=0) ; scoredGoals+=(["${teamB}"]=0) ; concededGoals+=(["${teamB}"]=0) ; fi 
        
        # if [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n{TEAM VARIABLES IN ARRAYS}  Number of teams: ${#teamsNames[@]}\n" ; echo "$(paste <( for ((i=-1;i<=${#teamsNames[@]};i++)) ; do  if [ ${i} -lt 1 ] ; then echo "#" ; else echo -e "${i}." ; fi ; done ; ) <( echo "Teams(Rank) ----------- ${!rankScore[@]}" | tr " " "\n" ) <( echo "Rank ---- ${rankScore[@]}" | tr " " "\n" ) <( echo "Teams(ScoredGoals) ------------------ ${!scoredGoals[@]}" | tr " " "\n" ) <( echo "ScoredGoals ----------- ${scoredGoals[@]}" | tr " " "\n" ) <( echo "Teams(ConcededGoals) -------------------- ${!concededGoals[@]}" | tr " " "\n" ) <( echo "ConcededGoals ------------- ${concededGoals[@]}" | tr " " "\n" ) -d " " | column -t)" ; fi

        # Team A win
        if [ "$(echo "${scoreA} > ${scoreB}" | bc -l)" -eq "1" ] ; then
            rankScore["${teamA}"]=$(echo "${rankScore["${teamA}"]} + 3" | bc)
        # Team B win
        elif [ "$(echo "${scoreA} < ${scoreB}" | bc -l)" -eq "1" ] ; then
            rankScore["${teamB}"]=$(echo "${rankScore["${teamB}"]} + 3" | bc)
        # Draw
        else
            rankScore["${teamA}"]=$(echo "${rankScore["${teamA}"]} + 1" | bc)
            rankScore["${teamB}"]=$(echo "${rankScore["${teamB}"]} + 1" | bc)
        fi

        # Update Goals statistics
        scoredGoals["${teamA}"]=$(echo "${scoredGoals["${teamA}"]} + ${scoreA}" | bc)
        scoredGoals["${teamB}"]=$(echo "${scoredGoals["${teamB}"]} + ${scoreB}" | bc)
        concededGoals["${teamA}"]=$(echo "${concededGoals["${teamA}"]} + ${scoreB}" | bc)
        concededGoals["${teamB}"]=$(echo "${concededGoals["${teamB}"]} + ${scoreA}" | bc)
    done
    IFS=${OLD_IFS}

    # DEBUG message
    if [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "\n{TEAM VARIABLES IN ARRAYS}  Number of teams: ${#teamsNames[@]}" ; echo "$(paste <( echo "Teams-index ----------- ${!teamsNames[@]}" | tr " " "\n" ) <( echo "Teams ----- ${teamsNames[@]}" | tr " " "\n" ) <( echo "Teams(Rank) ----------- ${!rankScore[@]}" | tr " " "\n" ) <( echo "Rank ---- ${rankScore[@]}" | tr " " "\n" ) <( echo "Teams(ScoredGoals) ------------------ ${!scoredGoals[@]}" | tr " " "\n" ) <( echo "ScoredGoals ----------- ${scoredGoals[@]}" | tr " " "\n" ) <( echo "Teams(ConcededGoals) -------------------- ${!concededGoals[@]}" | tr " " "\n" ) <( echo "ConcededGoals ------------- ${concededGoals[@]}" | tr " " "\n" ) -d " " | column -t)" ; fi

    # Create tmp file or empty its previous content if already exists
    # And save all information about each team to it
    echo -n "" > tmpFile.txt
    for ((i=0;i < ${#teamsNames[@]};i++)) ; do
        line="${teamsNames[$i]} ${rankScore[${teamsNames[$i]}]} ${scoredGoals[${teamsNames[$i]}]}-${concededGoals[${teamsNames[$i]}]}"
        echo ${line} >> tmpFile.txt
    done

    # Sort, concatenate and print final results (finally, i need to replace dash with spaces in team names)
    if [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "\n{RESULTS}" ; fi ;
    echo "$(paste <( for ((i=1;i<=${#teamsNames[@]};i++)) ; do  echo "${i}." ; done ;) <( cat tmpFile.txt | sort -t$' ' -k2,2nr -k1,1 | awk -F" " '{gsub("-", " ", $1); gsub(":", "*", $1);} {print $1"\t"$2"\t"$3}') -d "\t")"

    # Delete temporary files, and arrays
    rm -f tmpFile.txt
    unset teamsNames ; unset rankScore ; unset scoredGoals ; unset concededGoals ;  
    return 0
}


# -----------------------------------------------------------------------------------------------------------------------------------------------------
#   brief: Call results() function for each file or print error message
#
#   param: $1, $2 ... -> -> The name of each file (actually its path).
#
calc_and_print_results(){
    results $@
    local ERROR=$?

    # Print results (Take into consideration some error cases)
    if [ ${ERROR} -eq 0 ] ; then 
        true
    elif [ ${ERROR} -eq 10 ] ; then 
        echo "FILES: ${1//" "/," "}: at least one of the files is empty"
    elif [ ${ERROR} -eq 11 ] ; then 
        echo "FILES: ${1//" "/," "}: something is wrong with the format of at least one file at any point"
    elif [ ${ERROR} -eq 12 ] ; then 
        echo "FILES: ${1//" "/," "}: at least one of the files is too big"
    elif [ ${ERROR} -eq 13 ] ; then 
        echo "FILES: ${1//" "/," "}: there is not read permission for at least one of the input files"
    elif [ ${ERROR} -eq 14 ] ; then 
        echo "FILES: ${1//" "/," "}: at least one of the files does not exist"
    elif [ ${ERROR} -eq 15 ] ; then 
        echo "FILE: $1, at least one of the files is not a regular file"
    else 
        echo "FILES: $1, unexpected error"
    fi   
}


# ---------------------------------------------------------------------------------------------
#   brief: Help menu
#
usage() {
    echo "Usage: `basename ${0}` [-h] | [-c filetocheck] | [-dq] [-e errorfile] [-o outputfile] <inputfiles>..."
    echo 
    echo "Calculate football team ranking, based on each game result."
    echo "The input file's format is a collection of game outcomes. Each row looks like this: "
    echo "TeamA-TeamB:ScoreA-ScoreB"
    echo 
    echo "Options:"
    echo "  -c                check input file and exit"
    echo "  -d                debug mode on"
    echo "  -e                write stderrors in given file"
    echo "  -h                print this help menu and exit"   
    echo "  -o                write output in given file #TODO -is not working at the moment"
    echo "  -q                enable errors reporting"
    echo 
    echo
    echo "Exit status:"
    echo "   0 if OK,"
    echo 
    echo "- Input options:"
    echo "   1 if error with given argument at any point,"
    echo "   2 if unknown option,"
    echo "   3 if unexpected error,"
    echo 
    echo "- Input file errors:"
    echo "   10 if file is empty,"
    echo "   11 if something is wrong with the format of the file at any point,"
    echo "   12 if file is too big,"
    echo "   13 if there is not read permission,"
    echo "   14 if file does not exist"
    echo "   15 if this is not a regular file"
    echo 
    echo "Examples:"
    echo "   `basename ${0}` -e errorfile.txt inputfile.txt"
    echo "   `basename ${0}` -c inputfile.txt      # Check input's files format"
    echo "   `basename ${0}` -d -e errorfile.txt -o results.txt june_2019.txt july_2019.txt august_2019.txt"
    echo "   `basename ${0}` input1.txt input2.txt input3.txt   # Calculate ranking for all together"
    echo 
    echo "Implementation:"
    echo "   version         `basename ${0}` ${VERSION}"
    echo "   author          Spyridakis Christos"
    echo "   copyright       Copyright (c) 2019 https://www.github.com/CSpyridakis/SDTSP"
    echo "   license         MIT License"
}


#---------------------------------------------------------------------------------------------
# MAIN
while getopts ":c:de:ho:q" opt ; do
    case $opt in
        c)      CHECK_FILE="${OPTARG}" ; CHECK="${TRUE}" ; check ${CHECK_FILE} ; exit $?    ;;  
        d)      DEBUG=${TRUE}                                                               ;;  
        e)      ERRORS_FILE="${OPTARG}"                                                     ;;  
        h)      usage ; exit 0                                                              ;;  
        o)      OUTPUT_FILE="${OPTARG}"                                                     ;;  
        q)      QUIET=${FALSE}                                                              ;;    
        :)      QUIET=${FALSE} ; error "Missing argument for -$OPTARG option! Execute: \$ ${0} -h, in order to see properly usage." ; exit 1  ;;
        \?)     QUIET=${FALSE} ; error "Invalid option: -$OPTARG. Execute: \$ ${0} -h, in order to see properly usage."             ; exit 2  ;;
    esac
done
if [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "{DEBUG} - Bash version: ${BASH_VERSION}..." ; fi;
if [ ! -z ${ERRORS_FILE} ] ; then echo -n "" > "${ERRORS_FILE}" ; fi ;

# Remaining Arguments
shift $(($OPTIND - 1))  # Move to the next args
remainingArgs=$(echo $* | tr -s " " | tr "," " ") # Squeeze extra spaces and tranlate every comma to space. Remember valid input is also this: file1,file2,file3... 
if [ ${DEBUG} -eq ${TRUE} ] ; then echo "{DEBUG} - Remaining arguments are: |${remainingArgs}|" ; fi;

# Check remaining input data if there is not extra flags
if [ ! -z  "$(echo "${remainingArgs}" | grep -E " \-[a-zA-Z]{1,}")" ] ; then 
    QUIET=${FALSE}
    error "Please place OPTIONS before input files. Execute: \$ results -h, in order to see properly usage." 
    exit 1
fi

# Calculate and print results
calc_and_print_results "${remainingArgs}"
