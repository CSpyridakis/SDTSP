#!/bin/bash
##################################################################################################
#
#   results bash script
#
#   Author : Spyridakis Christos
#   Created Date : 7/10/2019
#   Last Updated : 9/10/2019
#   Email : spyridakischristos@gmail.com
#
#   Description : 
#       Calculate football team ranking, based on each game result.
#       The input file's format is a collection of game outcomes. Each row looks like this: 
#       TeamA-TeamB:ScoreA-ScoreB
#
##################################################################################################


TRUE="0"
FALSE="1"


# INPUT Parameters
INPUT_FILES="" # TODO 
OUTPUT_FILE=""
ERRORS_FILE=""
CHECK_FILE=""
DEBUG="${FALSE}"
QUIET="${FALSE}"
CHECK="${FALSE}"

# ---------------------------------------------------------------------------------------------
#   brief: Make sure that input arguments are ok
#
debug(){
    if [ ${DEBUG} = "${TRUE}" ] ; then
        echo -e ">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"
        echo "-> INPUT_FILES = ${INPUT_FILES}"
        echo "-> OUTPUT_FILE = ${OUTPUT_FILE}"
        echo "-> ERRORS_FILE = ${ERRORS_FILE}"
        echo "-> QUIET = ${QUIET}"
        echo -e "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n"
    fi
}


# ---------------------------------------------------------------------------------------------
#   brief: Print in stderr and/or in external file the error messages based on user input flags
#
error(){
    # Print error messages in stderr if quiet mode is not enabled
    if [ "${QUIET}" == "${FALSE}" ] ; then echo -e "$@" >&2 ; fi ;
    # Print error messages in file if it is given
    if [ "${ERRORS_FILE}" != "" ] ; then echo -e "$@" >> ${ERRORS_FILE} ; fi ;
}


# ---------------------------------------------------------------------------------------------
#   brief: Check if input file exists and if it is valid
#          (has correct syntax)
#
#   param: $1 -> The name of the file (actually its path)
# 
#   return: The content of the file and status code:
#           0 if it is OK,
#           10 if file is empty,
#           11 if something is wrong with the format of the file at any point,
#           12 if file is too big,
#           13 if there is not read permission,
#           14 if file does not exist
#
check(){
    if [ "${ERRORS_FILE}" != "" ] ; then echo -n "" > "${ERRORS_FILE}" ; fi ;
    if [ ${DEBUG} = "${TRUE}" ] ; then echo -e "Function: check(). Check file: ${CHECK_FILE}\t\t---START" ; fi ;

    local result=3
    local inputFile=$1

    # File exists, is readable and is not empty BUT i don't know yet if it is acceptable
    if [ -f ${inputFile} ] && [ -r ${inputFile} ] && [ -s ${inputFile} ]; then
        if [ ${DEBUG} = "${TRUE}" ] ; then echo -e "File exists, is not empty and is readable!\n" ; fi ;
        
        #Check if all lines of the file are in the needed format.
        minTN=2 ; maxTN=50  # Team names must contain from minTN to maxTN letters
        minGN=1 ; maxGN=2   # Each score must be a number with [minGN - maxGN] digits
        lineRegex="^[[:alpha:]]{${minTN},${maxTN}}-[[:alpha:]]{${minTN},${maxTN}}:[[:digit:]]{${minGN},${maxGN}}-[[:digit:]]{${minGN},${maxGN}}$"
        originalLines=$(cat ${inputFile})
        goodLines=$(grep -E "${lineRegex}" ${inputFile})

        if [ ${DEBUG} = "${TRUE}" ] ; then 
            echo -e "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
            echo -e "~originalLines | (Num of lines: `echo -e "${originalLines}" | wc -l` )"
            echo -e "${originalLines}\n---\n"
            echo -e "~goodLines | (Num of lines: `echo -e "${goodLines}" | wc -l` )"
            echo -e "${goodLines}\n---"
            echo -e "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
        fi 
        
        #Check if all lines of the file are valid
        if [ "${originalLines}" == "${goodLines}" ] ; then
            if [ ${CHECK} == "${TRUE}" ] ; then echo -e "File is valid!" ; fi ; 
            result=0
        else
            error "File does not have the needed format"
            result=11
        fi 
    elif [ ! -f ${inputFile} ] ; then
        error "File does not exist"
        result=14
    elif [ ! -r ${inputFile} ] ; then
        error "File is not readable"
        result=13
    elif [ ! -s ${inputFile} ] ; then
        error "File is empty"  
        result=10 
    else
        error "Unexpected error"  
    fi

    if [ ${DEBUG} = "${TRUE}" ] ; then echo -e "\nFunction: check(). Check file: ${CHECK_FILE}\t\t---END" ; fi ;
    return ${result}
}



# ---------------------------------------------------------------------------------------------
#   brief: Help menu
#
usage() {
    echo "Usage: `basename ${0}` [-h] | [-t] | [-c filetocheck] | [-dq] [-e errorfile] [-o outputfile] <inputfiles>..."
    echo 
    echo "Calculate football team ranking, based on each game result."
    echo "The input file's format is a collection of game outcomes. Each row looks like this: "
    echo "TeamA-TeamB:ScoreA-ScoreB"
    echo 
    echo "Options:"
    echo "  -c                check input file and exit"
    echo "  -d                debug mode on"
    echo "  -e                write stderrors in given file"
    echo "  -h                print this help menu and exit"   
    echo "  -o                write output in given file"
    echo "  -q                disable errors reporting"
    echo "  -t                run unit tests"
    echo 
    echo
    echo "Exit status:"
    echo "   0 if OK,"
    echo 
    echo "- Input options:"
    echo "   1 if error with given argument at any point,"
    echo "   2 if unknown option,"
    echo "   3 if unexpected error,"
    echo 
    echo "- Input file errors:"
    echo "   10 if file is empty,"
    echo "   11 if something is wrong with the format of the file at any point,"
    echo "   12 if file is too big,"
    echo "   13 if there is not read permission,"
    echo "   14 if file does not exist"
    echo 
    echo "Examples:"
    echo "   `basename ${0}` -e errorfile.txt inputfile.txt"
    echo "   `basename ${0}` -c inputfile.txt      # Check input's files format"
    echo "   `basename ${0}` -d -e errorsfile.txt -o results.txt june_2019.txt july_2019.txt august_2019.txt"
    echo 
    echo "Implementation:"
    echo "   version         `basename ${0}` 0.0.1"
    echo "   author          Spyridakis Christos"
    echo "   copyright       Copyright (c) 2019 https://www.github.com/CSpyridakis/SDTSP"
    echo "   license         MIT License"
}



#---------------------------------------------------------------------------------------------
# MAIN
while getopts ":c:de:ho:q" opt ; do
    case $opt in
        c)      CHECK_FILE="${OPTARG}" ; CHECK="${TRUE}" ; check ${CHECK_FILE} ; exit $?;;  
        d)      DEBUG=${TRUE}                                                           ;;  
        e)      ERRORS_FILE="${OPTARG}"                                                 ;;  
        h)      usage ; exit 0                                                          ;;  
        o)      OUTPUT_FILE="${OPTARG}"                                                 ;;  
        q)      QUIET=${TRUE}                                                           ;;  
        t)      tests                                          ;    exit $?             ;;  
        :)      error "Missing argument for -$OPTARG option!\nExecute: \$ ${0} -h, in order to see properly usage" ; exit 1  ;;
        \?)     error "Invalid option: -$OPTARG\nExecute: \$ ${0} -h, in order to see properly usage"              ; exit 2  ;; 
    esac
done

shift $(( OPTIND - 1 ))


