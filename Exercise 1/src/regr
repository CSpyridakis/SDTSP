#!/bin/bash
##################################################################################################
#   regr script
#
#   Author : Spyridakis Christos
#   Created Date : 8/10/2019
#   Last Updated : 15/10/2019
#   Email : spyridakischristos@gmail.com
#
#   Description : Calculate Linear Regression parameters that minimize linear regression squared error.
#                 The input file contains two vectors (X and Y). Each row looks like this --> X[i]:Y[i]
#                 Where i the i-th element of each vector, getting started from 0. Each element is
#                 a floating point number.
#
##################################################################################################

#Auxiliary variables 
DEC=10               #Number of decimals, for calculations
FALSE=0
TRUE=1

# Based from user input
OUTPUT_FILE=
ERRORS_FILE=
CHECK_FILE=
DEBUG=${FALSE}
QUIET=${TRUE}
CHECK=${FALSE}


# ---------------------------------------------------------------------------------------------
#   brief: Print in stderr and/or in external file the error messages based on user input options
#
error(){
    # Print error messages in stderr if quiet mode is not enabled
    if [ ${CHECK} -eq ${TRUE} ] || [ ${QUIET} -eq ${FALSE} ] || [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "$@" >&2 ; fi ;
    # Print error messages in file if it is given
    if [ ! -z ${ERRORS_FILE} ] ; then echo -e "$@" >> ${ERRORS_FILE} ; fi ;
}


# ---------------------------------------------------------------------------------------------
#   brief: Check if input file exists and if it is valid
#          (has correct syntax)
#
#   param: $1 -> The name of the file (actually its path)
# 
#   return: Exit with status code:
#           0 if it is OK,
#           10 if file is empty,
#           11 if something is wrong with the format of the file at any point,
#           12 if file is too big,
#           13 if there is not read permission,
#           14 if file does not exist
#           3 for unexpected error
#
check(){
    #In case that user wants to display error messages to a file, create it or empty its previous content
    if [ ${CHECK} -eq ${TRUE} ] && [ ! -z ${ERRORS_FILE} ] ; then echo -n "" > "${ERRORS_FILE}" ; fi ;

    local result=3
    local inputFile=$1

    # File exists, is readable and is not empty BUT i don't know yet if it is acceptable
    if [ -f ${inputFile} ] && [ -r ${inputFile} ] && [ -s ${inputFile} ]; then
        
        #Check if all lines of the file are in the needed format.
        #Each line must contain this: "F:F". Where F is a floating point number.
        #Acceptable representations for F are: -3 , 4 , 2. , 290.09 , -.23 , .9 , etc..
        lineRegex="^[-]?([0-9]+\.?|[0-9]*\.[0-9]+):[-]?([0-9]+\.?|[0-9]*\.[0-9]+)$"                     #Using regular expression to validate input
        local originalLines=$(cat ${inputFile})
        local goodLines=$(grep -E "${lineRegex}" ${inputFile})

        # if [ ${DEBUG} -eq ${TRUE} ] ; then 
        #     echo -e "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
        #     echo -e "~originalLines | (Num of lines: `echo -e "${originalLines}" | wc -l` )"
        #     echo -e "${originalLines}\n---\n"
        #     echo -e "~goodLines | (Num of lines: `echo -e "${goodLines}" | wc -l` )"
        #     echo -e "${goodLines}\n---"
        #     echo -e "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n"
        # fi 
        
        #Check if all lines of the file are valid
        if [ "${originalLines}" == "${goodLines}" ] ; then
            if [ ${CHECK} -eq ${TRUE} ] || [ ${DEBUG} -eq ${TRUE} ]; then echo -e "{DEBUG} - Function: check(). Check file: ${inputFile} --> File is valid!" ; fi ; 
            result=0
        else
            error "{DEBUG} - Function: check(). Check file: ${inputFile} --> File exists, is not empty and is readable. But file does not have the needed format!"
            result=11
        fi 
    elif [ ! -f ${inputFile} ] ; then
        error "{DEBUG} - Function: check(). Check file: ${inputFile} --> File does not exist"
        result=14
    elif [ ! -r ${inputFile} ] ; then
        error "{DEBUG} - Function: check(). Check file: ${inputFile} --> File is not readable"
        result=13
    elif [ ! -s ${inputFile} ] ; then
        error "{DEBUG} - Function: check(). Check file: ${inputFile} --> File is empty"  
        result=10 
    else
        error "{DEBUG} - Function: check(). Check file: ${inputFile} --> Unexpected error"  
        result=3
    fi

    return ${result}
}


# -----------------------------------------------------------------------------------------------------------------------------------------------------
#   brief:  Take one of the input files and calculate Linear Regression parameters that minimize 
#           linear regression squared error. 
#
#   param: $1 -> The name of the file (actually its path).
#
#   return: Exit with status code:
#           0 if it is OK,
#           1 if divided by zero,
#           3 for unexpected error,
#           K if something is wrong with the file
#
#   see:    Inline documentation of check() function for K values 
#
regr(){
    if [ ${DEBUG} -eq ${TRUE} ] ;  then echo -e "{DEBUG} - Function: regr() START FROM HERE ------------------------->"; fi
    check $1
    local ERROR=$?
    
    #Exit function if there is something wrong with this file
    if [ ${ERROR} -ne 0 ] ; then return ${ERROR}; fi

    #Read file's X and Y vectors
    length=$(echo -e "$(cat $1)" | wc -l ) #If i use `cat $1 | wc -l` and the last line is not empty, the length is wrong
    X_vector=$(cat "$1" | cut -d":" -f 1)
    Y_vector=$(cat "$1" | cut -d":" -f 2) 
    
    #Just a DEBUG message, print X and Y vectors from strings
    # if [ ${DEBUG} -eq ${TRUE} ] ;  then echo -e "\n{VECTORS - STRINGS} - length: ${length}" ; echo "$(paste <( echo "X ${X_vector}" | tr " " "\n" ) <( for ((i=0;i<=${length};i++)) ; do echo -e "|" ; done ; ) <( echo -e "Y ${Y_vector}" | tr " " "\n" ) -d " " | column -t)" ; fi

    # ---------------------------------------------------------------------------------------
    #   Calculate mantatory sums we need, in order to calculate parameters and squared error
    #
    #
    unset X ; unset Y                                                       #Delete both arrays, if already exist
    # Create X and Y arrays or return 2 if something is wrong
    declare -a X=(${X_vector}) ; if [ $? -ne 0 ] ; then return 3; fi
    declare -a Y=(${Y_vector}) ; if [ $? -ne 0 ] ; then return 3; fi

    #Just a DEBUG message, print X and Y vectors from Arrays
    if [ ${DEBUG} -eq ${TRUE} ] ;  then echo -e "\n{VECTORS - ARRAYS} - X_length: ${#X[@]} | Y_length: ${#Y[@]}" ; echo "$(paste <( echo "X ${X[@]}" | tr " " "\n" ) <( for ((i=0;i<=${length};i++)) ; do echo -e "|" ; done ; ) <( echo -e "Y ${Y[@]}" | tr " " "\n" ) -d " " | column -t)" ; fi

    local sum_x=0 ; local sum_y=0 ; local sum_xy=0 ; local sum_x2=0         # Init sums
    for ((i = 0; i <= ((${length} - 1)); i++)) ; do
        sum_x=$(echo "scale=${DEC}; ${sum_x} + ${X[i]}" | bc)               #sum_x = X[0] + X[1] + X[2] + ... + X[length-1]
        sum_y=$(echo "scale=${DEC}; ${sum_y} + ${Y[i]}" | bc)               #sum_y = Y[0] + Y[1] + Y[2] + ... + Y[length-1]
        sum_xy=$(echo "scale=${DEC}; ${sum_xy} + (${X[i]}*${Y[i]})" | bc)   #sum_xy = X[0]*Y[0] + X[1]*Y[1] + X[2]*Y[2] + ... + X[length-1]*Y[length-1]
        sum_x2=$(echo "scale=${DEC}; ${sum_x2} + (${X[i]}^2)" | bc)         #sum_x2 = X[0]^2 + X[1]^2 + X[2]^2 + ... + X[length-1]^2
    done

    if [ ${DEBUG} -eq ${TRUE} ] ;  then echo -e "\n{SUMS}" ; echo -e "sum_x : ${sum_x}\nsum_y : ${sum_y}\nsum_xy: ${sum_xy}\nsum_x2: ${sum_x2}" ; fi

    # ---------------------------------------------------------------------------------------
    #                  Calculate Linear Regression parameters and squared error
    #
    #                                                                                 ____
    #         (length*sum_xy) - (sum_x*sum_y)            sum_y - (a*sum_x)            \                       2
    #   a = ------------------------------------ , b = --------------------  ,  err =  >  (Y[i] - (aX[i] + b))
    #         (length*sum_x2) - (sum_x*sum_x)                 length                  / 
    #                                                                                 ----
    #
    local a_dividend=$(echo "scale=${DEC}; ( (${length}*${sum_xy}) - (${sum_x}*${sum_y}) )" | bc)
    local a_divisor=$(echo "scale=${DEC}; ( (${length}*${sum_x2}) - (${sum_x}*${sum_x}) )" | bc)
    if [ ${DEBUG} -eq ${TRUE} ] ;  then echo -e "\n{DIVISION}" ; echo -e "a_dividend: ${a_dividend}\na_divisor : ${a_divisor}\n" ; fi

    #Check if divisor for calculation of 'a' is zero. dividend/0 is not acceptable
    if [ "$(echo "${a_divisor} == 0" | bc -l)" -ne "1" ] ; then 
        local a=$(echo "scale=${DEC}; ( ${a_dividend}/${a_divisor} )" | bc)
        local b=$(echo "scale=${DEC}; ( ${sum_y} - (${a}*${sum_x}) )/( ${length} )" | bc)
        local err=0
        for ((i = 0; i <= ((${length} - 1)); i++)) ; do
            err=$(echo "scale=${DEC}; ${err} + ( ${Y[i]} - (${a}*${X[i]} + ${b}) )^2 " | bc)
        done
    else 
       return 1 
    fi
    
    #Delete each array
    unset X ; unset Y                                                       

    if [ ${DEBUG} -eq ${TRUE} ] ;  then echo -e "{RESULTS}" ; echo -e "a:   ${a}\nb:   ${b}\nerr: ${err}\n" ; fi

    #Display decimal places only if necessary and convert .2 or -.2 --> 0.2 and -0.2
    a_p="$(echo ${a} | awk '{printf "%.2f", $0}')"                  #From DEC places used for calculations, use only 2 of them and begin with zero if value is -.1 or .2 etc...
    b_p="$(echo ${b} | awk '{printf "%.2f", $0}')"                  #From DEC places used for calculations, use only 2 of them and begin with zero if value is -.1 or .2 etc...
    err_p="$(echo ${err} | awk '{printf "%.2f", $0}')"              #From DEC places used for calculations, use only 2 of them and begin with zero if value is -.1 or .2 etc...
    echo "FILE: $1, a=${a_p//\.00} b=${b_p//\.00} c=1 err=${err_p//\.00}" 
    if [ ${DEBUG} -eq ${TRUE} ] ;  then echo -e "{DEBUG} - Function: regr() <~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ENDED HERE"; fi
    return 0                    
}


# -----------------------------------------------------------------------------------------------------------------------------------------------------
#   brief: Calculate and print parameters and squared error for each file (or print error message)
#
#   param: $1 -> The name of the file (actually its path).
#
calc_and_print_results(){
    regr $1
    local ERROR=$?

    #Print results (Take into consideration some error cases)
    if [ ${ERROR} -eq 0 ] ; then 
        true
    elif [ ${ERROR} -eq 10 ] ; then 
        echo "FILE: $1, file is empty"
    elif [ ${ERROR} -eq 11 ] ; then 
        echo "FILE: $1, something is wrong with the format of the file at any point"
    elif [ ${ERROR} -eq 12 ] ; then 
        echo "FILE: $1, file is too big"
    elif [ ${ERROR} -eq 13 ] ; then 
        echo "FILE: $1, there is not read permission"
    elif [ ${ERROR} -eq 14 ] ; then 
        echo "FILE: $1, file does not exist"
    elif [ ${ERROR} -eq 1 ] ; then 
        echo "FILE: $1, divide by zero in the calculation of parameter a"
    else 
        echo "FILE: $1, unexpected error"
    fi   
}


# -----------------------------------------------------------------------------------------------------------------------------------------------------
#   brief: Help menu
#
usage() {
    echo "Usage: `basename ${0}` [-h] | [-t] | [-c filetocheck] | [-dq] [-e errorfile] [-o outputfile] <inputfiles>..."
    echo 
    echo "Calculate Linear Regression parameters that minimize linear regression squared error."
    echo "The input file's format is a collection of elements of two vectors' (X and Y). Each row looks like this: "
    echo "Xi:Yi"
    echo "Where Xi and Yi are floating poing numbers."
    echo 
    echo "Options:"
    echo "  -c                check an input file if is valid and exit"
    echo "  -d                debug mode on"
    echo "  -e                write stderrors in given file"
    echo "  -h                print this help menu and exit"   
    echo "  -o                write output in given file #TODO -is not working at the moment"
    echo "  -q                enable errors reporting"
    echo "  -t                run unit tests #TODO -is not working at the moment"
    echo 
    echo
    echo "Exit status:"
    echo "   0 if OK,"
    echo 
    echo "- Input options:"
    echo "   1 if error with given argument at any point,"
    echo "   2 if unknown option,"
    echo "   3 for unexpected error,"
    echo 
    echo "- Input file errors:"
    echo "   10 if file is empty,"
    echo "   11 if something is wrong with the format of the file at any point,"
    echo "   12 if file is too big,"
    echo "   13 if there is not read permission,"
    echo "   14 if file does not exist"
    echo 
    echo "Examples:"
    echo "   `basename ${0}` -e errorfile.txt inputfile.txt"
    echo "   `basename ${0}` -c inputfile.txt      # Check if input file is acceptable"
    echo "   `basename ${0}` -d -e errorsfile.txt -o results.txt input1.txt input2.txt input3.txt"
    echo 
    echo "Implementation:"
    echo "   version         `basename ${0}` 0.0.1"
    echo "   author          Spyridakis Christos"
    echo "   copyright       Copyright (c) 2019 https://www.github.com/CSpyridakis/SDTSP"
    echo "   license         MIT License"
}


# -----------------------------------------------------------------------------------------------------------------------------------------------------
#   brief: Just run my tests
#
tests(){
    #TODO
    # For testes created rows with this regex:
    # ^[-]?([0-9]{1,5}\.?|[0-9]{0,5}\.[0-9]{1,5}):[-]?([0-9]{1,5}\.?|[0-9]{0,5}\.[0-9]{1,5})$
    return 0
}


# -----------------------------------------------------------------------------------------------------------------------------------------------------
# MAIN
# Take input options and arguments
while getopts ":c:de:ho:q" opt ; do
    case $opt in
        c)      CHECK_FILE="${OPTARG}" ; CHECK=${TRUE} ; check ${CHECK_FILE} ; exit $?      ;;  
        d)      DEBUG=${TRUE}                                                               ;;  
        e)      ERRORS_FILE="${OPTARG}"                                                     ;;  
        h)      usage ; exit 0                                                              ;;  
        o)      OUTPUT_FILE="${OPTARG}"                                                     ;;  
        q)      QUIET=${FALSE}                                                              ;;  
        t)      tests                                          ;    exit $?                 ;;  
        :)      QUIET=${FALSE} ; error "Missing argument for -$OPTARG option! Execute: \$ ${0} -h, in order to see properly usage." ; exit 1  ;;
        \?)     QUIET=${FALSE} ; error "Invalid option: -$OPTARG Execute: \$ ${0} -h, in order to see properly usage."              ; exit 2  ;; 
    esac
done
if [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "Bash version: ${BASH_VERSION}...\n" ; fi;
if [ ! -z ${ERRORS_FILE} ] ; then echo -n "" > "${ERRORS_FILE}" ; fi ;

#Remaining Arguments
shift $(($OPTIND - 1))  #Move to the next args
remainingArgs=$(echo $* | tr -s " " | tr "," " ") #Squeeze extra spaces and tranlate every comma to space. Remember valid input is also this: file1,file2,file3... 
if [ ${DEBUG} -eq ${TRUE} ] ; then echo "Remaining arguments are: |${remainingArgs}|" ; fi;

#Check remaining input data if there is not extra flags
if [ ! -z  "$(echo "${remainingArgs}" | grep -E " \-[a-zA-Z]{1,}")" ] ; then 
    QUIET=${FALSE}
    error "Please place OPTIONS before input files. Execute: \$ results -h, in order to see properly usage." 
    exit 1
fi

#Calculate and print parameter and squared error for each file
for inFile in ${remainingArgs} ; do
    calc_and_print_results ${inFile}
    if [ ${DEBUG} -eq ${TRUE} ] ; then echo -e "\n________________________________________________________________________________________________\n" ; fi;
done
